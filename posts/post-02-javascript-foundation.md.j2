{% extends 'base.md.j2' %}
{% block lead %}
{% endblock %}
{% block content %}
## Why Look at the JavaScript?

## Configuration

I'll be using this `tsconfig.json` throughout the post.

{{
    highlight_block(
        'typescript/foundation/tsconfig.json',
        blob_path = 'typescript/foundation/tsconfig.json',
        explicit_lexer_name = 'JsonLexer',
        title = 'tsconfig.json',
        external_source_link = 'https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/tsconfig.json'
    )
}}

## From the Source

Decorators are built from stored, prebuilt JavaScript. [The `decorateHelper`](https://github.com/Microsoft/TypeScript/blob/v2.7.2/src/compiler/transformers/ts.ts#L3577), deep in the compiler, exports the `__decorate` function wherever it needs to go. The same function is used for all decorator types.

### Raw

[As of `v2.7.2`](https://github.com/Microsoft/TypeScript/blob/v2.7.2/src/compiler/transformers/ts.ts#L3577), `decorateHelper` generates this JavaScript.

{{
    highlight_block('''
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
''',
        explicit_lexer_name = 'JavascriptLexer',
        title = 'decorateHelper',
        external_source_link = 'https://github.com/Microsoft/TypeScript/blob/v2.7.2/src/compiler/transformers/ts.ts#L3577'
)
}}

To verify, we can create a simple class, decorate it, and see how TypeScript compiles it.

{{
    highlight_block(
        'typescript/foundation/raw/main.ts',
        blob_path = 'typescript/foundation/raw/main.ts',
        explicit_lexer_name = 'TypeScriptLexer',
        title = 'main.ts',
        external_source_link = 'https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/raw/main.ts',
    )
}}

{{ shell_session('$ tsc -p tsconfig.json') }}

{{
    highlight_block(
        'typescript/foundation/raw/main.js',
        blob_path = 'typescript/foundation/raw/main.js',
        explicit_lexer_name = 'JavascriptLexer',
        title = 'main.js',
        external_source_link = 'https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/raw/main.js',
    )
}}

The `__decorate` blob is defined at the top and consumed at the bottom with `foo` as an input. If you need more examples, either keep reading or compile more things.

### Prettified and Polished

As it stands, `__decorate` isn't easy to grok. Let's clean it up a bit to see how it works.

{{
    highlight_block(
        'typescript/foundation/pretty/decorate.js',
        blob_path = 'typescript/foundation/pretty/decorate.js',
        explicit_lexer_name = 'JavascriptLexer',
        title = 'decorate.js',
        external_source_link = 'https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/pretty/decorate.js',
    )
}}

* [Line 2](https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/pretty/decorate.js#L2) is a guarded assignment; it reuses an existing `__decorate` or builds it from scratch.
* [Line 5](https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/pretty/decorate.js#L5) counts the call's arguments. Remember the arguments have typically been

    1. `target`: base object
    2. `propertyKey`: name or symbol of the active object
    3. `descriptor`: the active [property descriptor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Description)

    We can reasonably infer having all three is important.

* [Lines 7-13](https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/pretty/decorate.js#L7) set the initial item that will decorated.

    * If there are fewer than three arguments, the item is the `target`, which should be the class.
    * If there are three (or more) arguments, the item is the property descriptor for `target[propertyKey]`.

* [Lines 16-21](https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/pretty/decorate.js#L16) search [the Reflect object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect) for a `decorate` method. I scratched my head over this for a few minutes, then discovered [a great SO answer](https://stackoverflow.com/a/46499259/2877698). It's future planning for the day when `Reflect.decorate` does exist.

* [Lines 23-39](https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/pretty/decorate.js#L23) loop over the passed-in decorators and attempt to evaluate them.

    * Once again, three arguments is important. If there are fewer than three, the decorator is called with `r`, which as we learned above, should be `target`.
    * With more than three arguments, the decorator is called with `r` as the property descriptor (in addition to `target` and `propertyKey`)
    * If there are three exactly, the decorator is called without anything to connect it to the current state (just `target` and `propertyKey`).

* [The `return`](https://github.com/thecjharries/posts-typescript-decorators/blob/master/typescript/foundation/pretty/decorate.js#L41) checks to see if the descriptor has been updated. If there are more than three arguments, the decorator was called with `r`, so it might have changed. If `r` is defined and the `target` is able to define `propertyKey` with the `r`-descriptor, the object will be updated. `r` is always returned.

## Analysis

### Parameter Decorators

### Property Decorators

### Method Decorators

### Class Decorators

## Recap
{% endblock %}
