{% extends 'base.md.j2' %}
{% block lead %}
{% endblock %}
{% block content %}
## Overview

In strict mode, property decorators are very similar to [parameter decorators](https://blog.wizardsoftheweb.pro/typescript-decorators-parameter-decorators) in that they're only able to observe declarations. [The official docs](https://www.typescriptlang.org/docs/handbook/decorators.html#property-decorators) state

> a property decorator can only be used to observe that a property of a specific name has been declared for a class.

Property decorators ignore any return, underscoring their inability to affect the decorated properties. [Similar to parameter decorators](https://blog.wizardsoftheweb.pro/typescript-decorators-reflection/#examplevalidateaparameterrange), property decorators can be used in tandem with other decorators to define extra information about the property. By themselves, their effectiveness is limited. [Logging property data](https://blog.wizardsoftheweb.pro/typescript-decorators-javascript-foundation/#propertydecorators) seems to be the best use for a property decorator by itself.

All bets are off outside of strict mode. Because of the extra flexibility (e.g. `this` is not `undefined`), it's possible to manipulate the property directly.

## Signature

### `target: any`

### `propertyKey: string | symbol`

### `descriptor: PropertyDescriptor`

## Changing Mode

### Strict Mode

### Not Strict Mode

## Usage

## Recap

{% endblock %}
